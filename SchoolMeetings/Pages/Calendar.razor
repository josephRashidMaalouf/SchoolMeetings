@page "/calendar"
@using Shared.Models.ViewModels
@inject CalendarViewModel ViewModel

<Card class="m-3">
    <CardHeader  Color="CardColor.Primary">
        <div class="container">
            <div class="row">
                
                <div class="col text-center">
                    <Button @onclick="ViewModel.GoToPrevMonth">
                        <Icon Name="IconName.ArrowLeft" />
                    </Button>
                    @ViewModel.Month.MonthName @ViewModel.Month.Year
                    <Button @onclick="ViewModel.GoToNextMonth">
                        <Icon Name="IconName.ArrowRight" />
                    </Button>
                </div>
                
            </div>
        </div>
    </CardHeader>
    <CardBody>
        <section class="calendar-body">
            @for (int i = 0; i < 7; i++)
            {
                <b class="m-1 text-center">@Enum.GetName(typeof(WeekDayLetters), i)</b>
            }
            @for (int i = 0; i < ViewModel.Month.NumOfDummyColumns - 1; i++)
            {
                <div/>
            }
            @for (int i = 1; i <= ViewModel.Month.MonthEnd.Day; i++)
            {
                
                if (ViewModel.Month.DateOfToday.Day == i)
                {
                    <div class="text-center today">
                        @i
                        @if (ViewModel.Month.BookableDates.Any(d => d == i))
                        {
                            <Badge Color="BadgeColor.Danger">
                                @ViewModel.Month.BookableDates.Count;
                            </Badge>
                        }
                    </div>
                    continue;

                }
                <div class="text-center">
                    @i
                    @if (ViewModel.Month.BookableDates.Any(d => d == i))
                    {
                        <Badge 
                            Color="BadgeColor.Danger"
                               IndicatorType="BadgeIndicatorType.RoundedPill">1
                        </Badge>
                    }
                </div>
            }
        </section>
    </CardBody>
</Card>





@code {
    // string monthName = string.Empty;
    // DateTime monthEnd;
    // string year = string.Empty;
    // int numDummyColumn = 0;
    // int monthsAway = 0;
    // int yearsAway = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ViewModel.GenerateMonth(0);

    }

    // public async Task GoToPrevMonth()
    // {
    //     monthsAway--;
    //     await CreateMonth(monthsAway);
    // }

    // public async Task GoToNextMonth()
    // {
    //     monthsAway++;
    //     await CreateMonth(monthsAway);
    // }

    // public async Task CreateMonth(int monthsAwayFromNow)
    // {

    //     year = DateTime.UtcNow.AddMonths(monthsAwayFromNow).Year.ToString();

    //     DateTime monthStart = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1)
    //         .AddMonths(monthsAway);
    //     monthEnd = monthStart
    //         .AddMonths(1)
    //         .AddDays(-1);

    //     monthName = monthStart.Month switch
    //     {
    //         1 => "Januari",
    //         2 => "Februari",
    //         3 => "Mars",
    //         4 => "April",
    //         5 => "Maj",
    //         6 => "Juni",
    //         7 => "Juli",
    //         8 => "Augusti",
    //         9 => "September",
    //         10 => "Oktober",
    //         11 => "November",
    //         12 => "December",
    //         _ => ""
    //     };

    //     numDummyColumn = (int)monthStart.DayOfWeek;
    // }

}