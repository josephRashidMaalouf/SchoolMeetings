@using SchoolMeetings.Presentation.Models.ViewModels.Calendars
@using Shared.Enums

@inject CalendarViewModel ViewModel

<Card class="m-3">
    <CardHeader  Color="CardColor.Primary">
        <div class="container">
            <div class="row">
                
                <div class="col text-center">
                    <Button @onclick="ViewModel.GoToPrevMonth">
                        <Icon Name="IconName.ArrowLeft" />
                    </Button>
                    @ViewModel.Month.MonthName @ViewModel.Month.Year
                    <Button @onclick="ViewModel.GoToNextMonth">
                        <Icon Name="IconName.ArrowRight" />
                    </Button>
                </div>
                
            </div>
        </div>
    </CardHeader>
    <CardBody>
        <section class="calendar-body">
            @for (int i = 0; i < 7; i++)
            {
                <b class="m-1 text-center">@Enum.GetName(typeof(WeekDayLetters), i)</b>
            }
            @for (int i = 0; i < ViewModel.Month.NumOfDummyColumns - 1; i++)
            {
                <div/>
            }
            @foreach (var day in ViewModel.Month.Days)
            {
                if (ViewModel.Month.DateOfToday.Day == day.Date)
                {
                    <div class="text-center today">
                        @day.Date
                        @if (ViewModel.Month.BookableDates.Any(d => d == day.Date))
                        {
                            <Badge Color="BadgeColor.Danger">
                                @ViewModel.Month.BookableDates.Count;
                            </Badge>
                        }
                    </div>
                    continue;

                }
                <div class="text-center">
                    @day.Date
                    @if (ViewModel.Month.BookableDates.Any(d => d == day.Date))
                    {
                        <Badge Color="BadgeColor.Danger"
                               IndicatorType="BadgeIndicatorType.RoundedPill">
                            1
                        </Badge>
                    }
                </div>
            }
        </section>
    </CardBody>
</Card>





@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ViewModel.GenerateMonth(0);

    }

}