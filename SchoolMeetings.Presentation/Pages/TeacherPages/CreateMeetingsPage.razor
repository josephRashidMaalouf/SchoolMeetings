@page "/create-meetings/{SelectedDate}"
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SchoolMeetings.Domain.Entities
@inject CreateMeetingsViewModel ViewModel
@inject NavigationManager NavigationManager
@inject IAccountManagement Acct
@attribute [Authorize]

<Card class="mb-3">
    <CardHeader class="bg-primary text-light text-center">
        Dina bokningsbara tider
    </CardHeader>
    <CardBody>
        <table class="table table-sm table-hover">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Tid</th>
                    <th scope="col" style="text-align: right; padding-right: 80px;">Redigera</th>

                </tr>
            </thead>
            <tbody>

                <Virtualize Items="ViewModel.UnBookedMeetings">
                    <tr>
                        <td>@context.MeetingStart.ToShortTimeString() - @context.MeetingEnd.ToShortTimeString()</td>
                        <td style="text-align: right;">
                            <Button class="btn-primary" @onclick="async () => await OnShowEditModalClick(context)">Ändra</Button>
                            <Button class="btn-danger" @onclick="async () => await ViewModel.DeleteMeetingAsync(context)">Ta bort</Button>
                        </td>
                    </tr>
                </Virtualize>


            </tbody>
        </table>
    </CardBody>
    <CardFooter>
        <Button class="btn-primary" @onclick="OnShowModalClick" style="width: 100%;">Lägg till</Button>
    </CardFooter>
</Card>
<Card class="mb-3">
    <CardHeader class="bg-primary text-light text-center">
        Dina bokade tider
    </CardHeader>
    <CardBody>
        <table class="table table-sm table-hover table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Tid</th>
                    <th scope="col">Elevens namn</th>
                    <th scope="col">Vårdnadshavare</th>
                    <th scope="col" style="text-align: center;">Redigera</th>

                </tr>
            </thead>
            <tbody>
                <Virtualize Items="ViewModel.BookedMeetings">
                    <tr>
                        <td>@context.MeetingStart.ToShortTimeString() - @context.MeetingEnd.ToShortTimeString()</td>
                        <td>@context.StudentName</td>
                        <td>
                            @if (context.Parents is not null)
                            {
                                @foreach (var parent in @context.Parents)
                                {
                                    <p style="display: inline;">@parent </p>
                                }
                            }
                        </td>
                        <td style="text-align: center;">
                            <Button class="btn-primary mb-1">Ändra</Button>
                            <Button class="btn-danger" @onclick="async () => await ViewModel.DeleteMeetingAsync(context)">Ta bort</Button>
                        </td>
                    </tr>

                </Virtualize>
            </tbody>
        </table>
    </CardBody>
</Card>

<Modal @ref="addNewMeetingModal" Title="Modal title">
    <BodyTemplate>
        <EditForm Model="ViewModel.NewMeeting">
            <p>Välj starttid för mötet</p>
            <TimeInput @bind-Value="ViewModel.NewMeetingStart" class="mb-3" />
            <p>Välj sluttid för mötet</p>
            <TimeInput @bind-Value="ViewModel.NewMeetingEnd" />
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Stäng</Button>
        <Button Color="ButtonColor.Primary" @onclick="async () => await ViewModel.AddNewMeetingAsync(ViewModel.LoggedInTeacherEmail)">Lägg till</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="editMeetingModal" Title="Modal title">
    <BodyTemplate>
        <EditForm Model="ViewModel.BookMeetingModel">
            <div class="mb-3">
                <InputText @bind-Value="ViewModel.BookMeetingModel.ParentName1" class="form-control" Placeholder="Vårdnadshavare 1 (obligatorisk)"/>
            </div>
            <div class="mb-3">
                <InputText @bind-Value="ViewModel.BookMeetingModel.ParentPhone1" class="form-control" Placeholder="Vårdnadshavare 1 telefon" />
            </div>
            <div class="mb-3">
                <InputText @bind-Value="ViewModel.BookMeetingModel.ParentEmail1" class=" form-control" Placeholder="Vårdnadshavare 1 email" />
            </div>
            <div class="mb-3">
                <InputText @bind-Value="ViewModel.BookMeetingModel.ParentName2" class=" form-control" Placeholder="Vårdnadshavare 2" />
            </div>
            <div class="mb-3">
                <InputText @bind-Value="ViewModel.BookMeetingModel.ParentPhone2" class=" form-control" Placeholder="Vårdnadshavare 2 telefon" />
            </div>
            <div class="mb-3">
                <InputText @bind-Value="ViewModel.BookMeetingModel.ParentEmail2" class=" form-control" Placeholder="Vårdnadshavare 2 email" />
            </div>
            <div class="mb-3">
                <InputText @bind-Value="ViewModel.BookMeetingModel.NameOfStudent" class=" form-control" Placeholder="Elevens namn" />
            </div>
            
        </EditForm>
        

        
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideEditModalClick">Stäng</Button>
        <Button Color="ButtonColor.Primary" @onclick="async () => await ViewModel.ManualBookMeetingAsync(ViewModel.SelectedManualBookMeeting)">Spara</Button>
    </FooterTemplate>
</Modal>


@code {
    [Parameter]
    public string? SelectedDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var isAuthenticated = await Acct.CheckAuthenticatedAsync();

        if (isAuthenticated is false)
            NavigationManager.NavigateTo("/");

        if (SelectedDate is not null)
            ViewModel.SelectedDate = DateTime.Parse(SelectedDate);

        ViewModel.LoggedInTeacherEmail = await Acct.GetUserEmailAsync();

        await ViewModel.FetchMeetingsByTeacher(ViewModel.LoggedInTeacherEmail);

    }


    private Modal addNewMeetingModal;

    private async Task OnShowModalClick()
    {
        await addNewMeetingModal?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await addNewMeetingModal?.HideAsync();
    }

    private Modal editMeetingModal;

    private async Task OnShowEditModalClick(Meeting meeting)
    {
        ViewModel.SelectedManualBookMeeting = meeting;

        await editMeetingModal?.ShowAsync();
    }

    private async Task OnHideEditModalClick()
    {
        await editMeetingModal?.HideAsync();
    }


}