@page "/book-meeting/{TeacherEmail}/meetings"

@inject BookMeetingViewModel ViewModel

<Card class="mb-3">
    <CardHeader class="bg-primary text-light text-center">
        Välj en tid för utvecklingssamtal
    </CardHeader>
    <CardBody>
        <table class="table table-sm table-hover">
            <thead class="thead-dark">
            <tr>
                <th scope="col">Datum</th>
                <th scope="col" style="text-align: left; ">Tid</th>
                    <th scope="col"></th>

            </tr>
            </thead>
            <tbody>

            <Virtualize Items="ViewModel.UnbookedMeetings">
                <tr>
                        <td>@context.MeetingEnd.ToShortDateString()</td>
                        <td>@context.MeetingStart.ToShortTimeString() - @context.MeetingEnd.ToShortTimeString()</td>
                    <td style="text-align: right;">
                        <Button class="btn-primary">Boka</Button>
                    </td>
                </tr>
            </Virtualize>


            </tbody>
        </table>
    </CardBody>
    
</Card>

@code {
    
    [Parameter]
    public string? TeacherEmail { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //TODO: implement functionality that checks if teacheremail (link) is valid, and if not redirects to a not found page


        await ViewModel.FetchUnbookedMeetings(TeacherEmail);

    }

}